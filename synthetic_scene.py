#!usr/bin/env python
# John Sutor
# July 21, 2020

import bpy
import os
import random
from addon_utils import check, paths, enable


class SyntheticScene:
    """
  The SyntheticScene class is used to establish
  and render scenes to be used for synthetic 
  data purposes on-the-fly. It is meant to be 
  extendable and customizable as to quickly get
  up-and-running generating synthetic data 
  within Blender. This class makes assumptions 
  about the way in which you structure your
  working directory, including all textures,
  models, and background images within it. 
  Background images must be included in their own
  directory. Models and textures should be
  included together in their own directory. 
  Furthermore, textures should share the name of 
  the object that they are to be applied to. This 
  is intended for Blender >=2.80  
  """

    def __init__(
        self,
        directory=os.getcwd(),
        models_directory=os.getcwd() + "/models/",
        renders_directory=os.getcwd() + "/renders/",
    ):
        """
    Initialize the SyntheticScene class. Establishes 
    the object, the base mesh, as well as the background
    image for the scene.

    Parameters
    ----------
    directory : String
      The working directory for the synthetic data environment. Defaults to the current working directory
    models_directory: String
      The subdirectory containing the models to load into the scene. Defaults to the current working directory plus '/models/'
    renders_directory: String
      The subdirectory containing the renders generated by the scene. Defaults to the current working directory plus '/renders/'
    """
        self.directory = directory
        self.models_directory = models_directory
        self.renders_directory = renders_directory
        self.render_total = 0

        # Ensure that the import images as planes add-on is enabled
        enable("io_import_images_as_planes")

        # Ensure the origin is fixed to the center of the scene
        bpy.ops.object.origin_set(type="ORIGIN_GEOMETRY")

    def render(self, render_count, models_list, backgrounds_list, debug=False):
        """
    Renders one or more scenes based on the specified parameters

    Parameters
    ----------
    render_count : Int
      The number of renders to generate for the current iteration. Defaults to one. 
    models_list: List
      A list of dictionaries describing the models you intend to render in the scene. 
    backgrounds_list: List
      A list of models you intend to render behind the scene.
    Returns
    -------
    render
      The rendered image generated by the scene. 
    """
    model = random.choice(models_list)
    bpy.ops.wm.collada_import(filepath= self.directory + self.models_directory + model.path)
    bpy.data.objects[model.name].scale = (2, 2, 2)



    def clear(self, debug=False):
      """
      Clears the current scene
      """
        pass
