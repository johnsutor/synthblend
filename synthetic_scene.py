#!usr/bin/env python
# John Sutor
# July 21, 2020

import bpy
import os
import random
from addon_utils import check, paths, enable


class SyntheticScene:
    """
  The SyntheticScene class is used to establish
  and render scenes to be used for synthetic 
  data purposes on-the-fly. It is meant to be 
  extendable and customizable as to quickly get
  up-and-running generating synthetic data 
  within Blender. This class makes assumptions 
  about the way in which you structure your
  working directory, including all textures,
  models, and background images within it. 
  Background images must be included in their own
  directory. Models and textures should be
  included together in their own directory. 
  Furthermore, textures should share the name of 
  the object that they are to be applied to. This 
  is intended for Blender >=2.80  
  """

    def __init__(
        self,
        directory=os.getcwd(),
        backgrounds_directory="/backgrounds/",
        models_directory="/models/",
        renders_directory="/renders/",
    ):
        """
    Initialize the SyntheticScene class. Establishes 
    the object, the base mesh, as well as the background
    image for the scene.

    Parameters
    ----------
    directory : String
      The working directory for the synthetic data environment. Defaults to the current working directory
    models_directory: String
      The subdirectory containing the models to load into the scene. Defaults to the current working directory plus '/models/'
    renders_directory: String
      The subdirectory containing the renders generated by the scene. Defaults to the current working directory plus '/renders/'
    """
        os.chdir(directory)
        self.directory = os.getcwd()
        self.backgrounds_directory = backgrounds_directory
        self.models_directory = models_directory
        self.renders_directory = renders_directory
        self.render_total = 0

        # Ensure that the import images as planes add-on is enabled
        enable("io_import_images_as_planes")

        # Ensure the origin is fixed to the center of the scene
        bpy.ops.object.origin_set(type="ORIGIN_GEOMETRY")

    def render(self, debug=False):
        """
    Renders one or more scenes based on the specified parameters

    Parameters
    ----------
    debug: Boolean
      Whether to run the method in debug mode (defaults to false)
    Returns
    -------
    render
      The rendered image generated by the scene. 
    """
    # Load in the list of models, and randomly choose a model 
    models_list = [file for file in os.listdir(self.directory + self.models_directory) if file[-4:] == '.dae']
    model = random.choice(models_list)

    # Load in the list of meshes, and randomly choose a mesh 
    meshes_list = os.listdir(self.directory + self.models_directory + model[:-4])
    mesh = random.choice(meshes_list)

    # Load in the list of backgrounds 
    backgrounds_list = os.listdir(self.directory + self.backgrounds_directory)

    # Randomly choose a background for the model
    background = random.choice(backgrounds_list)

    # Load in the model
    bpy.ops.wm.collada_import(filepath=self.directory + self.models_directory + model)
    
    # Scale up the object 
    bpy.ops.object.origin_set(type='ORIGIN_GEOMETRY') 
    bpy.data.objects[model[:-4]].scale = (2, 2, 2)

    # Apply the mesh 
    mat = bpy.data.materials.new(name=mesh[:-4])
    mat.use_nodes = True
    bsdf = mat.node_tree.nodes["Principled BSDF"]
    texImage = mat.node_tree.nodes.new('ShaderNodeTexImage')
    texImage.image = bpy.data.images.load(filepath=self.directory + self.models_directory + mesh)
    mat.node_tree.links.new(bsdf.inputs['Base Color'], texImage.outputs['Color'])
    
    # Assign it to object
    if bpy.context.scene.objects[model[:-4]].data.materials:
        bpy.context.scene.objects[model[:-4]].data.materials[0] = mat
    else:
        bpy.context.scene.objects[model[:-4]].data.materials.append(mat)
        
    # Add a camera
    camera = bpy.data.cameras.new("Camera")
    camera.show_background_images = True
    camera_obj = bpy.data.objects.new("Camera", camera)
    camera_obj.location = (3, -3, 4)
    camera_obj.rotation_euler = (0.785398, 0, 0.785398)
    bpy.context.scene.camera = camera_obj

    # Add the sun
    light = bpy.data.lights.new(name="Light", type='SUN')
    light_obj = bpy.data.objects.new("Light", light)
    light_obj.location = (3, -3, float('inf'))
    bpy.context.collection.objects.link(light_obj)
    bpy.context.view_layer.objects.active = light_obj
    
    # Determine which background image to use randomly 
    
    # Import the background image 
    enable('io_import_images_as_planes')
    bpy.ops.import_image.to_plane(files=[{"name": self.directory + self.models_directory + background}])
    background_obj = bpy.data.objects[background[:-4]]
    background_obj.location = (-2, 2, -2)
    background_obj.rotation_euler = (0.785398, 0, 0.785398)
    background_obj.scale =  (5, 5, 5)

    # Render the final image
    bpy.context.scene.render.filepath = self.directory + self.renders_directory + 'render' + self.render_total + '.jpg'
    bpy.ops.render.render(write_still = True)
    self.render_total += 1

    def clear(self, debug=False):
      """
      Clears the current scene
      """
        pass
